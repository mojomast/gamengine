
{
  "id": "neon-clicker-demo-1",
  "name": "Neon Clicker Battle",
  "description": "A 2D game engine demo with player character system and cyberpunk theme",
  "template": "game-engine",
  "version": "1.0.0",
  "createdAt": "2025-09-17T13:59:00.000Z",
  "files": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Game Engine Demo - Neon Clicker Battle</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"header\">\n        <nav class=\"nav-buttons\">\n            <button class=\"demo-btn\" onclick=\"window.open('../project-manager.html', '_blank')\" title=\"Open the project manager to create and manage game projects\">📁 Open Project Manager</button>\n            <button class=\"demo-btn\" onclick=\"window.open('docs/MASTER-ARCHITECTURE.md', '_blank')\" title=\"Access system configuration and architecture documentation\">⚙️ Configure Systems</button>\n            <button class=\"demo-btn\" onclick=\"window.open('README.md', '_blank')\" title=\"View comprehensive documentation for the game engine\">📖 View Documentation</button>\n        </nav>\n        <h1>🎮 GAME ENGINE DEMO - WITH PLAYER CHARACTER 🎮</h1>\n        <p>A comprehensive 2D game engine with integrated player character system featuring movement, abilities, and visual effects</p>\n    </div>\n\n    <div class=\"game-container\">\n        <canvas id=\"gameCanvas\" width=\"1024\" height=\"768\"></canvas>\n\n        <!-- New UI Sections -->\n        <div id=\"characterStats\" class=\"ui-panel character-stats-panel\">\n            <h3>Character Stats</h3>\n            <div id=\"characterInfo\"></div>\n        </div>\n\n        <div id=\"inventoryGrid\" class=\"ui-panel inventory-panel\">\n            <h3>Inventory</h3>\n            <div id=\"inventorySlots\" class=\"inventory-slots\"></div>\n        </div>\n\n        <div id=\"abilityHotbar\" class=\"ui-panel ability-panel\">\n            <h3>Abilities</h3>\n            <div id=\"abilitySlots\" class=\"ability-slots\"></div>\n        </div>\n\n        <div id=\"dialogPanel\" class=\"ui-panel dialog-panel\">\n            <div id=\"dialogText\"></div>\n            <div id=\"dialogChoices\"></div>\n        </div>\n\n        <div class=\"loading\" id=\"loadingScreen\">\n            <h2>INITIALIZING GAME ENGINE...</h2>\n            <div class=\"spinner\"></div>\n        </div>\n\n        <div class=\"engine-info\">\n            <h3>🔧 Engine Features</h3>\n            <div class=\"feature\">\n                <span>Scene Management:</span>\n                <span class=\"feature-status\">✅ Active</span>\n            </div>\n            <div class=\"feature\">\n                <span>Input System:</span>\n                <span class=\"feature-status\">✅ Responsive</span>\n            </div>\n            <div class=\"feature\">\n                <span>Player Character System:</span>\n                <span class=\"feature-status\">✅ Integrated</span>\n            </div>\n            <div class=\"feature\">\n                <span>Movement & Physics:</span>\n                <span class=\"feature-status\">✅ 8-Directional</span>\n            </div>\n            <div class=\"feature\">\n                <span>Particle Effects:</span>\n                <span class=\"feature-status\">✅ Dynamic</span>\n            </div>\n            <div class=\"feature\">\n                <span>Animation System:</span>\n                <span class=\"feature-status\">✅ Smooth</span>\n            </div>\n            <div class=\"feature\">\n                <span>Health/Energy System:</span>\n                <span class=\"feature-status\">✅ Visual HUD</span>\n            </div>\n            <div class=\"feature\">\n                <span>Trail Effects:</span>\n                <span class=\"feature-status\">✅ Real-time</span>\n            </div>\n            <div class=\"feature\">\n                <span>Ability System:</span>\n                <span class=\"feature-status\">✅ Energy-based</span>\n            </div>\n            <div class=\"feature\">\n                <span>UI Framework:</span>\n                <span class=\"feature-status\">✅ Modular</span>\n            </div>\n            <div class=\"feature\">\n                <span>Audio Manager:</span>\n                <span class=\"feature-status\">✅ Spatial</span>\n            </div>\n            <div class=\"feature\">\n                <span>Game Objects:</span>\n                <span class=\"feature-status\">✅ Component-based</span>\n            </div>\n            <div class=\"feature\">\n                <span>State Management:</span>\n                <span class=\"feature-status\">✅ Persistent</span>\n            </div>\n        </div>\n\n        <div class=\"controls\">\n            <div class=\"controls-title\">🎯 Player Controls</div>\n            <div class=\"control-item\">\n                <span class=\"key\">WASD</span> Move Player Character\n            </div>\n            <div class=\"control-item\">\n                <span class=\"key\">↑↓←→</span> Alternative Movement\n            </div>\n            <div class=\"control-item\">\n                <span class=\"key\">SPACE</span> Player Attack (15 Energy)\n            </div>\n            <div class=\"control-item\">\n                <span class=\"key\">Q</span> Dash Left (25 Energy)\n            </div>\n            <div class=\"control-item\">\n                <span class=\"key\">E</span> Dash Right (25 Energy)\n            </div>\n            <div class=\"control-item\">\n                <span class=\"key\">CLICK</span> Create Particle Effects\n            </div>\n            <div class=\"control-item\">\n                <span class=\"key\">ESC</span> Pause/Menu\n            </div>\n        </div>\n\n        <!-- Demo Control Buttons -->\n        <div class=\"demo-controls\">\n            <button id=\"demoCharacterBtn\" class=\"demo-btn\">📊 Character Demo</button>\n            <button id=\"demoInventoryBtn\" class=\"demo-btn\">🎒 Inventory Demo</button>\n            <button id=\"demoAbilityBtn\" class=\"demo-btn\">⚡ Ability Demo</button>\n            <button id=\"demoDialogBtn\" class=\"demo-btn\">💬 Dialog Demo</button>\n        </div>\n\n        <!-- Save/Load Control Panel -->\n        <div id=\"saveLoadPanel\" class=\"ui-panel\" style=\"top: 10px; right: 10px; width: 200px; background: rgba(0, 0, 0, 0.9); border: 2px solid #00f593;\">\n            <h3 style=\"color: #ffd700; margin-bottom: 10px;\">💾 Game Save</h3>\n            <div id=\"saveSlots\" style=\"margin-bottom: 10px;\">\n                <button id=\"saveSlot1\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">Save Slot 1</button>\n                <button id=\"loadSlot1\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">Load Slot 1</button>\n                <button id=\"saveSlot2\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">Save Slot 2</button>\n                <button id=\"loadSlot2\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">Load Slot 2</button>\n                <button id=\"saveSlot3\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">Save Slot 3</button>\n                <button id=\"loadSlot3\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">Load Slot 3</button>\n            </div>\n            <button id=\"exportSave\" class=\"demo-btn\" style=\"width: 100%; margin-bottom: 5px;\">📤 Export Save</button>\n            <button id=\"importSave\" class=\"demo-btn\" style=\"width: 100%;\">📥 Import Save</button>\n            <input type=\"file\" id=\"importFileInput\" style=\"display: none;\" accept=\".json\">\n        </div>\n\n        <!-- Save/Load Notification -->\n        <div id=\"saveNotification\" style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0, 0, 0, 0.9); color: #00f593; padding: 20px; border: 2px solid #00f593; border-radius: 8px; font-size: 16px; text-align: center; display: none; z-index: 2000;\">\n            <div id=\"notificationText\">Game Saved!</div>\n        </div>\n    </div>\n</body>\n<script src=\"script.js\"></script>\n</html>",
    "styles.css": "@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Orbitron:wght@400;700;900&display=swap');\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Orbitron', monospace;\n    background: linear-gradient(135deg, #0a0a0a, #1a1a2e, #16213e);\n    color: #ffffff;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n\n.header {\n    background: rgba(0, 0, 0, 0.8);\n    padding: 15px;\n    text-align: center;\n    border-bottom: 2px solid #00f593;\n    box-shadow: 0 2px 10px rgba(0, 245, 147, 0.3);\n}\n\n.header h1 {\n    font-family: 'Press Start 2P', cursive;\n    font-size: 24px;\n    color: #ff206e;\n    text-shadow: 0 0 10px #05d9e8;\n    margin-bottom: 5px;\n}\n\n.header p {\n    font-size: 14px;\n    color: #00f593;\n}\n\n.nav-buttons {\n    position: absolute;\n    top: 15px;\n    left: 15px;\n    display: flex;\n    gap: 8px;\n    z-index: 100;\n}\n\n.game-container {\n    flex: 1;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n\n#gameCanvas {\n    border: 3px solid #ffd700;\n    border-radius: 10px;\n    box-shadow:\n        0 0 20px rgba(255, 215, 0, 0.5),\n        inset 0 0 20px rgba(0, 0, 0, 0.3);\n    background: #000;\n    max-width: 100%;\n    max-height: 100%;\n}\n\n.loading {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n    z-index: 1000;\n}\n\n.loading h2 {\n    font-family: 'Press Start 2P', cursive;\n    color: #ff206e;\n    margin-bottom: 20px;\n    animation: pulse 1.5s infinite;\n}\n\n.spinner {\n    width: 50px;\n    height: 50px;\n    border: 4px solid rgba(255, 255, 255, 0.3);\n    border-top: 4px solid #00f593;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    margin: 0 auto;\n}\n\n@keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.controls {\n    position: absolute;\n    bottom: 10px;\n    left: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.8);\n    padding: 10px;\n    border-radius: 8px;\n    border: 1px solid #00f593;\n    font-size: 12px;\n    text-align: center;\n}\n\n.controls-title {\n    color: #ffd700;\n    font-weight: bold;\n    margin-bottom: 5px;\n}\n\n.control-item {\n    display: inline-block;\n    margin: 0 10px;\n    color: #ffffff;\n}\n\n.demo-controls {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    display: flex;\n    gap: 8px;\n    z-index: 100;\n}\n\n.demo-btn {\n    background: linear-gradient(45deg, #ff206e, #05d9e8);\n    border: none;\n    color: white;\n    padding: 6px 10px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 11px;\n    font-weight: bold;\n    transition: all 0.3s ease;\n}\n\n.demo-btn:hover {\n    transform: scale(1.05);\n    box-shadow: 0 0 10px rgba(255, 32, 110, 0.5);\n}\n\n.demo-btn:active {\n    transform: scale(0.95);\n}\n\n.key {\n    background: #333;\n    border: 1px solid #666;\n    border-radius: 3px;\n    padding: 2px 6px;\n    font-family: monospace;\n    color: #00f593;\n}\n\n.engine-info {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.7);\n    padding: 10px;\n    border-radius: 8px;\n    border: 1px solid #ff206e;\n    font-size: 11px;\n    min-width: 200px;\n}\n\n.engine-info h3 {\n    color: #ff206e;\n    margin-bottom: 8px;\n    font-size: 12px;\n}\n\n.feature {\n    display: flex;\n    justify-content: space-between;\n    margin: 3px 0;\n    color: #ffffff;\n}\n\n.feature-status {\n    color: #00f593;\n}\n\n@media (max-width: 768px) {\n    .header h1 {\n        font-size: 18px;\n    }\n\n    .game-container {\n        padding: 10px;\n    }\n\n    .controls, .engine-info {\n        position: relative;\n        margin: 10px;\n    }\n\n    .engine-info {\n        order: -1;\n    }\n}\n\n/* Virtual gamepad for mobile */\n.virtual-gamepad {\n    display: none;\n}\n\n@media (max-width: 768px) and (orientation: landscape),\n       (max-width: 480px) {\n    .virtual-gamepad {\n        display: flex !important;\n    }\n}\n\n/* New UI Panel Styles */\n.ui-panel {\n    position: absolute;\n    background: rgba(0, 0, 0, 0.85);\n    border: 2px solid #00f593;\n    border-radius: 8px;\n    padding: 12px;\n    font-size: 12px;\n    color: #ffffff;\n    backdrop-filter: blur(5px);\n    box-shadow: 0 4px 15px rgba(0, 245, 147, 0.3);\n    z-index: 100;\n}\n\n.ui-panel h3 {\n    color: #ffd700;\n    margin: 0 0 8px 0;\n    font-size: 14px;\n    text-align: center;\n}\n\n.character-stats-panel {\n    top: 100px;\n    left: 10px;\n    width: 250px;\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n.inventory-panel {\n    top: 100px;\n    right: 10px;\n    width: 300px;\n    max-height: 400px;\n}\n\n.inventory-slots {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 4px;\n}\n\n.inventory-slot {\n    width: 50px;\n    height: 50px;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid #666;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    font-size: 10px;\n}\n\n.inventory-slot:hover {\n    background: rgba(0, 245, 147, 0.2);\n    border-color: #00f593;\n}\n\n.inventory-slot.filled {\n    background: rgba(255, 215, 0, 0.2);\n}\n\n.ability-panel {\n    bottom: 120px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 600px;\n}\n\n.ability-slots {\n    display: flex;\n    gap: 8px;\n    justify-content: center;\n}\n\n.ability-slot {\n    width: 60px;\n    height: 60px;\n    background: rgba(255, 255, 255, 0.1);\n    border: 2px solid #666;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    font-size: 12px;\n    font-weight: bold;\n}\n\n.ability-slot:hover {\n    background: rgba(5, 217, 232, 0.2);\n    border-color: #05d9e8;\n}\n\n.ability-slot.ready {\n    border-color: #00f593;\n    background: rgba(0, 245, 147, 0.1);\n}\n\n.ability-slot.cooldown {\n    border-color: #666;\n    background: rgba(255, 255, 255, 0.05);\n}\n\n.dialog-panel {\n    bottom: 10px;\n    left: 10px;\n    right: 10px;\n    max-height: 100px;\n    display: none;\n}\n\n.dialog-panel.active {\n    display: block;\n}\n\n#dialogText {\n    margin-bottom: 8px;\n    line-height: 1.4;\n}\n\n#dialogChoices {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n}\n\n.dialog-choice {\n    background: rgba(0, 245, 147, 0.1);\n    border: 1px solid #00f593;\n    padding: 4px 8px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 11px;\n}\n\n.dialog-choice:hover {\n    background: rgba(0, 245, 147, 0.3);\n}\n\n/* Retro scanlines effect */\n.game-container::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: repeating-linear-gradient(\n        0deg,\n        transparent,\n        transparent 2px,\n        rgba(0, 255, 0, 0.03) 2px,\n        rgba(0, 255, 0, 0.03) 4px\n    );\n    pointer-events: none;\n    z-index: 5;\n}",
    "script.js": "// Game Engine Demo - Player Character Integration\nasync function createSimpleDemo() {\n    // Create a simple canvas demo\n    const canvas = document.getElementById('gameCanvas');\n    const ctx = canvas.getContext('2d');\n\n    let time = 0;\n    // Use global variables for save/load functionality\n    let particles = globalParticles;\n    let score = globalScore;\n    let clicks = globalClicks;\n\n    // Player character class - Core component for character-based games\n    class Player {\n        constructor(x, y) {\n            // Position and Movement Properties\n            this.x = x;\n            this.y = y;\n            this.width = 24;\n            this.height = 32;\n            this.speed = 250;\n            this.vx = 0;\n            this.vy = 0;\n\n            // Health and Energy System\n            this.health = 100;\n            this.maxHealth = 100;\n            this.energy = 100;\n            this.maxEnergy = 100;\n\n            // Visual and Animation Properties\n            this.facing = 'right';\n            this.isMoving = false;\n            this.animTime = 0;\n            this.trail = [];\n        }\n\n        update(dt, keys) {\n            this.vx = 0;\n            this.vy = 0;\n            this.isMoving = false;\n\n            // Movement input\n            if (keys['KeyW'] || keys['ArrowUp']) {\n                this.vy = -this.speed;\n                this.isMoving = true;\n            }\n            if (keys['KeyS'] || keys['ArrowDown']) {\n                this.vy = this.speed;\n                this.isMoving = true;\n            }\n            if (keys['KeyA'] || keys['ArrowLeft']) {\n                this.vx = -this.speed;\n                this.facing = 'left';\n                this.isMoving = true;\n            }\n            if (keys['KeyD'] || keys['ArrowRight']) {\n                this.vx = this.speed;\n                this.facing = 'right';\n                this.isMoving = true;\n            }\n\n            // Diagonal movement normalization\n            if (this.vx !== 0 && this.vy !== 0) {\n                this.vx *= 0.707;\n                this.vy *= 0.707;\n            }\n\n            // Update position\n            this.x += this.vx * dt;\n            this.y += this.vy * dt;\n\n            // Keep player in bounds\n            this.x = Math.max(this.width/2, Math.min(canvas.width - this.width/2, this.x));\n            this.y = Math.max(this.height/2, Math.min(canvas.height - this.height/2, this.y));\n\n            // Update animation time\n            if (this.isMoving) {\n                this.animTime += dt * 8;\n            }\n\n            // Update trail effect\n            this.trail.push({\n                x: this.x,\n                y: this.y,\n                life: 1,\n                time: Date.now()\n            });\n\n            // Remove old trail points\n            this.trail = this.trail.filter(point => {\n                point.life -= dt * 3;\n                return point.life > 0;\n            });\n\n            // Regenerate energy slowly\n            this.energy = Math.min(this.maxEnergy, this.energy + dt * 20);\n        }\n\n        render(ctx) {\n            // Render trail effect\n            this.trail.forEach((point, index) => {\n                ctx.save();\n                ctx.globalAlpha = point.life * 0.3;\n                ctx.fillStyle = '#05d9e8';\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 3 * point.life, 0, Math.PI * 2);\n                ctx.fill();\n                ctx.restore();\n            });\n\n            ctx.save();\n\n            // Player body (animated if moving)\n            const bobOffset = this.isMoving ? Math.sin(this.animTime) * 2 : 0;\n            const playerY = this.y + bobOffset;\n\n            // Player shadow\n            ctx.save();\n            ctx.globalAlpha = 0.3;\n            ctx.fillStyle = '#000000';\n            ctx.fillRect(this.x - this.width/2, this.y + this.height/2 - 2, this.width, 4);\n            ctx.restore();\n\n            // Player body (main)\n            ctx.fillStyle = '#ff206e';\n            ctx.fillRect(this.x - this.width/2, playerY - this.height/2, this.width, this.height);\n\n            // Player glow effect\n            ctx.save();\n            ctx.shadowColor = '#ff206e';\n            ctx.shadowBlur = 15;\n            ctx.fillStyle = '#ff206e';\n            ctx.fillRect(this.x - this.width/2 + 2, playerY - this.height/2 + 2, this.width - 4, this.height - 4);\n            ctx.restore();\n\n            // Player details\n            ctx.fillStyle = '#00f593';\n            const eyeOffset = this.facing === 'right' ? 4 : -4;\n            ctx.fillRect(this.x - 6 + eyeOffset, playerY - 8, 3, 3);\n            ctx.fillRect(this.x + 3 + eyeOffset, playerY - 8, 3, 3);\n\n            // Chest emblem\n            ctx.fillStyle = '#ffd700';\n            ctx.fillRect(this.x - 4, playerY - 2, 8, 6);\n\n            // Movement indicator\n            if (this.isMoving) {\n                ctx.fillStyle = '#00ff00';\n                ctx.font = '12px monospace';\n                ctx.textAlign = 'center';\n                ctx.fillText('→', this.x, playerY - this.height/2 - 8);\n            }\n\n            ctx.restore();\n\n            // Health bar\n            this.renderHealthBar(ctx);\n            // Energy bar\n            this.renderEnergyBar(ctx);\n        }\n\n        renderHealthBar(ctx) {\n            const barWidth = 40;\n            const barHeight = 6;\n            const barX = this.x - barWidth/2;\n            const barY = this.y - this.height/2 - 15;\n\n            // Background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n            ctx.fillRect(barX - 1, barY - 1, barWidth + 2, barHeight + 2);\n\n            // Health bar\n            const healthPercent = this.health / this.maxHealth;\n            ctx.fillStyle = healthPercent > 0.5 ? '#00f593' : healthPercent > 0.25 ? '#ffd700' : '#ff206e';\n            ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n        }\n\n        renderEnergyBar(ctx) {\n            const barWidth = 40;\n            const barHeight = 4;\n            const barX = this.x - barWidth/2;\n            const barY = this.y - this.height/2 - 8;\n\n            // Background\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n            ctx.fillRect(barX - 1, barY - 1, barWidth + 2, barHeight + 2);\n\n            // Energy bar\n            const energyPercent = this.energy / this.maxEnergy;\n            ctx.fillStyle = '#05d9e8';\n            ctx.fillRect(barX, barY, barWidth * energyPercent, barHeight);\n        }\n\n        dash(direction) {\n            if (this.energy >= 25) {\n                const dashDistance = 100;\n                this.x += Math.cos(direction) * dashDistance;\n                this.y += Math.sin(direction) * dashDistance;\n                this.energy -= 25;\n\n                // Keep in bounds after dash\n                this.x = Math.max(this.width/2, Math.min(canvas.width - this.width/2, this.x));\n                this.y = Math.max(this.height/2, Math.min(canvas.height - this.height/2, this.y));\n\n                return true;\n            }\n            return false;\n        }\n\n        attack() {\n            if (this.energy >= 15) {\n                this.energy -= 15;\n                return {\n                    x: this.x + (this.facing === 'right' ? 30 : -30),\n                    y: this.y,\n                    damage: 25\n                };\n            }\n            return null;\n        }\n    }\n\n    // Simple particle class\n    class DemoParticle {\n        constructor(x, y) {\n            this.x = x;\n            this.y = y;\n            this.vx = (Math.random() - 0.5) * 200;\n            this.vy = (Math.random() - 0.5) * 200;\n            this.life = 1;\n            this.decay = Math.random() * 0.02 + 0.01;\n            this.size = Math.random() * 5 + 2;\n            this.color = `hsl(${Math.random() * 360}, 70%, 60%)`;\n        }\n\n        update(dt) {\n            this.x += this.vx * dt;\n            this.y += this.vy * dt;\n            this.life -= this.decay;\n            this.vx *= 0.98;\n            this.vy *= 0.98;\n        }\n\n        render(ctx) {\n            ctx.save();\n            ctx.globalAlpha = this.life;\n            ctx.fillStyle = this.color;\n            ctx.beginPath();\n            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n\n    // Create player character at center of screen\n    const player = new Player(canvas.width / 2, canvas.height / 2);\n    globalPlayer = player; // Assign to global variable for save/load\n\n    // Game loop\n    function gameLoop() {\n        time += 0.016;\n\n        // Update player\n        player.update(0.016, keys);\n\n        // Clear canvas\n        ctx.fillStyle = 'rgba(10, 10, 10, 0.1)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Background grid effect\n        ctx.strokeStyle = 'rgba(0, 245, 147, ' + (0.1 + Math.sin(time) * 0.05) + ')';\n        ctx.lineWidth = 1;\n\n        const gridSize = 50;\n        for (let x = (Math.sin(time * 0.5) * 10) % gridSize; x < canvas.width; x += gridSize) {\n            ctx.beginPath();\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, canvas.height);\n            ctx.stroke();\n        }\n\n        for (let y = (Math.cos(time * 0.3) * 10) % gridSize; y < canvas.height; y += gridSize) {\n            ctx.beginPath();\n            ctx.moveTo(0, y);\n            ctx.lineTo(canvas.width, y);\n            ctx.stroke();\n        }\n\n        // Render player\n        player.render(ctx);\n\n        // Update and render particles\n        particles = particles.filter(particle => {\n            particle.update(0.016);\n            particle.render(ctx);\n            return particle.life > 0;\n        });\n\n        // Render UI\n        ctx.fillStyle = '#ff206e';\n        ctx.font = 'bold 24px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText('🎮 GAME ENGINE DEMO - WITH PLAYER 🎮', canvas.width / 2, 50);\n\n        ctx.fillStyle = '#00f593';\n        ctx.font = '18px monospace';\n        ctx.fillText('Click anywhere to create particle effects!', canvas.width / 2, 80);\n\n        ctx.fillStyle = '#ffd700';\n        ctx.font = '16px monospace';\n        ctx.textAlign = 'left';\n        ctx.fillText('Score: ' + score, 20, 120);\n        ctx.fillText('Clicks: ' + clicks, 20, 140);\n        ctx.fillText('Particles: ' + particles.length, 20, 160);\n\n        // Player stats\n        ctx.fillStyle = '#ff206e';\n        ctx.fillText('Player Position: (' + Math.round(player.x) + ', ' + Math.round(player.y) + ')', 20, 220);\n        ctx.fillText('Health: ' + Math.round(player.health) + '/' + player.maxHealth, 20, 240);\n        ctx.fillText('Energy: ' + Math.round(player.energy) + '/' + player.maxEnergy, 20, 260);\n\n        // Controls status indicator\n        ctx.fillStyle = player.isMoving ? '#00ff00' : '#666666';\n        ctx.fillText('WASD/Arrows: Move Player', 20, 300);\n\n        ctx.fillStyle = '#ffffff';\n        ctx.fillText('SPACE: Player Attack', 20, 320);\n        ctx.fillText('Q/E: Dash Left/Right', 20, 340);\n        ctx.fillText('ESC: Pause Menu', 20, 360);\n\n        // Player trail effect indicator\n        if (player.trail.length > 0) {\n            ctx.fillStyle = '#05d9e8';\n            ctx.fillText('Trail Active (' + player.trail.length + ' points)', 20, 380);\n        }\n\n        requestAnimationFrame(gameLoop);\n    }\n\n    // Enhanced click handler\n    canvas.addEventListener('click', (e) => {\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        const x = (e.clientX - rect.left) * scaleX;\n        const y = (e.clientY - rect.top) * scaleY;\n\n        console.log(`Click at: ${x}, ${y}`);\n\n        // Create click ripple effect\n        createClickRipple(x, y);\n\n        // Create particles at exact click location\n        for (let i = 0; i < 20; i++) {\n            particles.push(new DemoParticle(x, y));\n        }\n\n        clicks++;\n        globalClicks = clicks; // Sync with global\n        score += 10;\n        globalScore = score; // Sync with global\n    });\n\n    // Keyboard handler\n    let keys = {};\n\n    window.addEventListener('keydown', (e) => {\n        keys[e.code] = true;\n\n        // Handle specific key actions\n        if (e.code === 'Space') {\n            e.preventDefault();\n            // Player attack\n            const attack = player.attack();\n            if (attack) {\n                createClickRipple(attack.x, attack.y);\n                for (let i = 0; i < 15; i++) {\n                    particles.push(new DemoParticle(attack.x, attack.y));\n                }\n                score += 25;\n                globalScore = score; // Sync with global\n            }\n        }\n\n        if (e.code === 'KeyQ') {\n            e.preventDefault();\n            // Dash left\n            if (player.dash(Math.PI)) {\n                createClickRipple(player.x, player.y);\n                for (let i = 0; i < 10; i++) {\n                    particles.push(new DemoParticle(player.x, player.y));\n                }\n            }\n        }\n\n        if (e.code === 'KeyE') {\n            e.preventDefault();\n            // Dash right\n            if (player.dash(0)) {\n                createClickRipple(player.x, player.y);\n                for (let i = 0; i < 10; i++) {\n                    particles.push(new DemoParticle(player.x, player.y));\n                }\n            }\n        }\n\n        if (e.code === 'Escape') {\n            e.preventDefault();\n            alert('🎮 Pause Menu\\n\\nGame Engine Demo\\nPress OK to continue');\n        }\n    });\n\n    window.addEventListener('keyup', (e) => {\n        keys[e.code] = false;\n    });\n\n    // Click ripple effect\n    let ripples = [];\n\n    function createClickRipple(x, y) {\n        ripples.push({\n            x: x,\n            y: y,\n            radius: 0,\n            maxRadius: 50,\n            life: 1,\n            decay: 0.02\n        });\n    }\n\n    // Update and render click ripples\n    setInterval(() => {\n        ripples = ripples.filter(ripple => {\n            ripple.radius += 2;\n            ripple.life -= ripple.decay;\n\n            if (ripple.life > 0) {\n                ctx.save();\n                ctx.globalAlpha = ripple.life * 0.5;\n                ctx.strokeStyle = '#00f593';\n                ctx.lineWidth = 3;\n                ctx.beginPath();\n                ctx.arc(ripple.x, ripple.y, ripple.radius, 0, Math.PI * 2);\n                ctx.stroke();\n\n                // Inner ripple\n                ctx.strokeStyle = '#ff206e';\n                ctx.lineWidth = 1;\n                ctx.beginPath();\n                ctx.arc(ripple.x, ripple.y, ripple.radius * 0.7, 0, Math.PI * 2);\n                ctx.stroke();\n                ctx.restore();\n            }\n\n            return ripple.life > 0 && ripple.radius < ripple.maxRadius;\n        });\n    }, 16);\n\n    gameLoop();\n}\n\nconst initGame = createSimpleDemo;\n\n// Initialize everything\nfunction initializeWithStyle() {\n    const loadingScreen = document.getElementById('loadingScreen');\n\n    setTimeout(async () => {\n        try {\n            await initGame();\n\n            loadingScreen.style.transition = 'opacity 0.5s ease-out';\n            loadingScreen.style.opacity = '0';\n\n            setTimeout(() => {\n                loadingScreen.style.display = 'none';\n            }, 500);\n\n            // Initialize SaveManager after everything is loaded\n            saveManager = new SaveManager();\n\n            console.log('🎮 Game Engine Demo Ready!');\n            console.log('📊 Features Demonstrated:');\n            console.log('  • Real-time rendering');\n            console.log('  • Particle systems');\n            console.log('  • Input handling');\n            console.log('  • Animation loops');\n            console.log('  • Visual effects');\n            console.log('  • Player character system');\n            console.log('  • Save/Load system');\n            console.log('💾 Use the Save/Load panel to save your game!');\n\n        } catch (error) {\n            console.error('Failed to initialize game:', error);\n            loadingScreen.innerHTML = '<h2>❌ INITIALIZATION FAILED</h2><p>Check console for details</p>';\n        }\n    }, 1000);\n}\n\n// Responsive canvas handling\nfunction resizeCanvas() {\n    const canvas = document.querySelector('#gameCanvas');\n    const container = document.querySelector('.game-container');\n\n    if (canvas && container) {\n        const containerRect = container.getBoundingClientRect();\n        const maxWidth = containerRect.width - 40;\n        const maxHeight = containerRect.height - 40;\n\n        const aspectRatio = 1024 / 768;\n        let newWidth = maxWidth;\n        let newHeight = newWidth / aspectRatio;\n\n        if (newHeight > maxHeight) {\n            newHeight = maxHeight;\n            newWidth = newHeight * aspectRatio;\n        }\n\n        canvas.style.width = newWidth + 'px';\n        canvas.style.height = newHeight + 'px';\n    }\n}\n\nwindow.addEventListener('resize', resizeCanvas);\n\n// Prevent context menu on right click\ndocument.addEventListener('contextmenu', (e) => {\n    if (e.target.tagName === 'CANVAS') {\n        e.preventDefault();\n    }\n});\n\n// Initialize everything when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        resizeCanvas();\n        initializeWithStyle();\n    });\n} else {\n    resizeCanvas();\n    initializeWithStyle();\n}\n\nconsole.log('🎮 Game Engine Demo Loading...');\nconsole.log('💡 Tip: Open browser console to see engine logs');\nconsole.log('🔧 Type gameEngineDebug.getEngineStats() for engine info');\n\n// Global game state variables\nlet globalPlayer = null;\nlet globalScore = 0;\nlet globalClicks = 0;\nlet globalParticles = [];\nlet saveManager = null;\n\n// Save/Load Management System\nclass SaveManager {\n    constructor() {\n        this.autoSaveInterval = null;\n        this.lastSaveTime = Date.now();\n        this.autoSaveDelay = 30000; // Auto-save every 30 seconds\n\n        this.init();\n        this.setupAutoSave();\n    }\n\n    init() {\n        // Setup event listeners for save/load buttons\n        this.setupSaveLoadButtons();\n    }\n\n    setupSaveLoadButtons() {\n        // Save buttons\n        document.getElementById('saveSlot1').addEventListener('click', () => this.saveGame('slot_0'));\n        document.getElementById('saveSlot2').addEventListener('click', () => this.saveGame('slot_1'));\n        document.getElementById('saveSlot3').addEventListener('click', () => this.saveGame('slot_2'));\n\n        // Load buttons\n        document.getElementById('loadSlot1').addEventListener('click', () => this.loadGame('slot_0'));\n        document.getElementById('loadSlot2').addEventListener('click', () => this.loadGame('slot_1'));\n        document.getElementById('loadSlot3').addEventListener('click', () => this.loadGame('slot_2'));\n\n        // Export/Import buttons\n        document.getElementById('exportSave').addEventListener('click', () => this.exportSave());\n        document.getElementById('importSave').addEventListener('click', () => this.importSave());\n       